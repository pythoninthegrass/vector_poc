---
- name: Deploy Logging Stack
  hosts: all
  any_errors_fatal: true
  gather_facts: true
  vars:
    src_dir: "{{ playbook_dir }}/config"
    dest_dir: "/home/{{ ansible_user }}/.config/logging-stack"
    required_dirs:
      - "{{ dest_dir }}"
      - "{{ dest_dir }}/alertmanager"
      - "{{ dest_dir }}/grafana"
      - "{{ dest_dir }}/grafana/dashboards"
      - "{{ dest_dir }}/grafana/provisioning"
      - "{{ dest_dir }}/loki"
      - "{{ dest_dir }}/minio"
      - "{{ dest_dir }}/nginx"
      - "{{ dest_dir }}/prometheus"
      - "{{ dest_dir }}/vector"
    pip_install_packages:
      - name: docker
  roles:
    - role: geerlingguy.pip
    - role: geerlingguy.docker
      vars:
        docker_add_repo: true
        docker_repo_url: https://download.docker.com/linux
        docker_users:
          - "{{ ansible_user }}"
        docker_daemon_options:
          storage-driver: "vfs"
          log-opts:
            max-size: "100m"
        docker_install_compose_plugin: true
        docker_compose_package: docker-compose-plugin
        docker_compose_package_state: present
      become: true
      tags: docker
  tasks:
    - name: Create required directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop: "{{ required_dirs }}"
      become: true
      become_user: "{{ ansible_user }}"

    - name: Copy docker-compose.yml
      ansible.builtin.copy:
        src: docker-compose.yml
        dest: "{{ dest_dir }}/docker-compose.yml"
        mode: '0644'
      become: true

    - name: Copy configuration files
      ansible.builtin.copy:
        src: "{{ src_dir }}/{{ item.src }}"
        dest: "{{ dest_dir }}/{{ item.dest }}"
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - { src: "alertmanager/alertmanager.yml", dest: "alertmanager/alertmanager.yml" }
        - { src: "grafana/grafana.ini", dest: "grafana/grafana.ini" }
        - { src: "grafana/provisioning/dashboards/dashboard.yml", dest: "grafana/provisioning/dashboards.yml" }
        - { src: "grafana/provisioning/datasources/datasource.yml", dest: "grafana/provisioning/datasources.yml" }
        - { src: "grafana/dashboards/sample-dashboard.json", dest: "grafana/dashboards/vector-metrics.json" }
        - { src: "loki/config.yml", dest: "loki/config.yml" }
        - { src: "minio/init.sh", dest: "minio/init.sh" }
        - { src: "nginx/nginx.conf", dest: "nginx/nginx.conf" }
        - { src: "prometheus/prometheus.yml", dest: "prometheus/prometheus.yml" }
        - { src: "vector/vector.yml", dest: "vector/vector.yml" }
      become: true

    # TODO: debug
    - name: Pull Docker images
      community.docker.docker_compose_v2:
        project_src: "{{ dest_dir }}"
        pull: missing
      tags: qa

    - name: Stop any existing services
      community.docker.docker_compose_v2:
        project_src: "{{ dest_dir }}"
        state: absent
        remove_orphans: true
        remove_volumes: true
      register: teardown_output
      tags: qa
      register: teardown_output

    - name: Show teardown results
      ansible.builtin.debug:
        var: teardown_output
        verbosity: 1

    - name: Create and start services
      community.docker.docker_compose_v2:
        project_src: "{{ dest_dir }}"
        state: present
      register: startup_output

    - name: Show startup results
      ansible.builtin.debug:
        var: startup_output
        verbosity: 1

    - name: Verify services are running
      ansible.builtin.assert:
        that: item.State == 'running'
        fail_msg: "Service {{ item.Service }} is not running"
        success_msg: "Service {{ item.Service }} is running"
      loop: "{{ startup_output.containers }}"
      loop_control:
        label: "{{ item.Service }}"

    - name: Wait for services to be healthy
      ansible.builtin.uri:
        url: "http://localhost:{{ item.port }}{{ item.path }}"
        method: GET
        status_code: 200
        validate_certs: false
      register: health_check
      until: health_check.status == 200
      retries: 12
      delay: 5
      loop:
        - { port: 3000, path: '/api/health', service: 'Grafana' }
        - { port: 9090, path: '/-/healthy', service: 'Prometheus' }
        - { port: 9093, path: '/-/healthy', service: 'Alertmanager' }
        - { port: 3100, path: '/ready', service: 'Loki Gateway' }
      loop_control:
        label: "{{ item.service }}"
