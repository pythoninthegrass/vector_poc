x-image-versions:
  ubuntu_image: &ubuntu_image ubuntu:20.04
  minio_image: &minio_image minio/minio:latest
  loki_image: &loki_image grafana/loki:3.2.2
  nginx_image: &nginx_image nginx:1.26-alpine3.20
  vector_image: &vector_image timberio/vector:0.43.0-alpine
  prometheus_image: &prometheus_image prom/prometheus:v3.0.1
  alertmanager_image: &alertmanager_image prom/alertmanager:v0.27.0
  grafana_image: &grafana_image grafana/grafana:11.4.0

x-default-logging: &default_logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  ubuntu:
    image: *ubuntu_image
    container_name: ubuntu
    command: |
      bash -c '
        while true; do
          echo "Test log message $(date)"
          sleep 30
        done'
    volumes:
      - logs:/var/log
    healthcheck:
      test: ["CMD", "ls", "/var/log"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - loki
    logging: *default_logging

  minio:
    image: *minio_image
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data \
        && mkdir -p /data/loki-ruler \
        && minio server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_PROMETHEUS_URL=http://prometheus:9090
      - MINIO_PROMETHEUS_JOB_ID=minio
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live"]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki
    logging: *default_logging

  minio-init:
    image: *minio_image
    volumes:
      - ./config/minio:/config
    entrypoint: ["/config/init.sh"]
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - loki
    logging: *default_logging

  read:
    image: *loki_image
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yml -target=read -config.expand-env=true"
    ports:
      - "3101:3100"
    volumes:
      - ./config/loki/config.yml:/etc/loki/config.yml
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki_dns
      loki:
        aliases:
          - loki
    logging: *default_logging

  write:
    image: *loki_image
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yml -target=write -config.expand-env=true"
    ports:
      - "3102:3100"
    volumes:
      - ./config/loki/config.yml:/etc/loki/config.yml
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3100/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      <<: *loki_dns
    logging: *default_logging

  gateway:
    image: *nginx_image
    container_name: nginx-gateway
    entrypoint:
      - sh
      - -euc
      - /docker-entrypoint.sh nginx -g "daemon off;"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_data:/var/log/nginx
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki
    depends_on:
      read:
        condition: service_healthy
      write:
        condition: service_healthy
    logging: *default_logging

  backend:
    image: *loki_image
    container_name: loki-backend
    command: "-config.file=/etc/loki/config.yml -target=backend -config.expand-env=true"
    volumes:
      - ./config/loki/config.yml:/etc/loki/config.yml
      - loki_data:/loki
    depends_on:
      read:
        condition: service_healthy
      write:
        condition: service_healthy
    networks:
      - loki
    logging: *default_logging

  vector:
    image: *vector_image
    container_name: vector
    command: --config /etc/vector/vector.yml
    ports:
      - "8686:8686"
      - "9598:9598"
    volumes:
      - ./config/vector:/etc/vector
      - logs:/var/log:ro
      - vector_data:/var/lib/vector
      - /var/run/docker.sock:/var/run/docker.sock:ro
    healthcheck:
      test: ["CMD", "vector", "validate", "/etc/vector/vector.yml"]
      interval: 15s
      timeout: 10s
      retries: 2
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - loki
    logging: *default_logging

  prometheus-init:
    image: *prometheus_image
    user: root
    entrypoint:
      - "chown"
      - "-R"
      - "nobody:nobody"
      - "/prometheus"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - loki
    logging: *default_logging

  prometheus:
    image: *prometheus_image
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      [
        '--log.level=debug',
        '--config.file=/etc/prometheus/prometheus.yml',
        '--storage.tsdb.path=/prometheus',
        '--enable-feature=remote-write-receiver',
        '--query.lookback-delta=30s'
      ]
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - prometheus-init
    networks:
      - loki
    logging: *default_logging

  alertmanager:
    image: *alertmanager_image
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./config/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - loki
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:9093/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default_logging

  grafana:
    image: *grafana_image
    container_name: grafana
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./config/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - loki
    logging: *default_logging

networks:
  loki:

volumes:
  logs:
  alertmanager_data:
  grafana_data:
  loki_data:
  minio_data:
  nginx_data:
  prometheus_data:
  vector_data:
